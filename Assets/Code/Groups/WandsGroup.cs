// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ViveDB {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using UniRx;
    
    
    public partial class WandsGroup : ReactiveGroup<Wands> {
        
        private IEcsComponentManagerOf<WandLeft> _WandLeftManager;
        
        private IEcsComponentManagerOf<WandRight> _WandRightManager;
        
        private int lastEntityId;
        
        private WandLeft WandLeft;
        
        private WandRight WandRight;
        
        public IEcsComponentManagerOf<WandLeft> WandLeftManager {
            get {
                return _WandLeftManager;
            }
            set {
                _WandLeftManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandRight> WandRightManager {
            get {
                return _WandRightManager;
            }
            set {
                _WandRightManager = value;
            }
        }
        
        public override System.Collections.Generic.IEnumerable<UniRx.IObservable<int>> Install(uFrame.ECS.APIs.IComponentSystem componentSystem) {
            WandLeftManager = componentSystem.RegisterComponent<WandLeft>();
            yield return WandLeftManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return WandLeftManager.RemovedObservable.Select(_=>_.EntityId);;
            WandRightManager = componentSystem.RegisterComponent<WandRight>();
            yield return WandRightManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return WandRightManager.RemovedObservable.Select(_=>_.EntityId);;
        }
        
        public override bool Match(int entityId) {
            lastEntityId = entityId;
            if ((WandLeft = WandLeftManager[entityId]) == null) {
                return false;
            }
            if ((WandRight = WandRightManager[entityId]) == null) {
                return false;
            }
            return true;
        }
        
        public override Wands Select() {
            var item = new Wands();;
            item.EntityId = lastEntityId;
            item.WandLeft = WandLeft;
            item.WandRight = WandRight;
            return item;
        }
    }
}
