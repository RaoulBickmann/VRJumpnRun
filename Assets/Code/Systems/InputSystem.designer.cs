// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ViveDB {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    using ViveDB;
    
    
    public partial class InputSystemBase : uFrame.ECS.Systems.EcsSystem, uFrame.ECS.APIs.ISystemUpdate {
        
        private IEcsComponentManagerOf<Wand> _WandManager;
        
        private IEcsComponentManagerOf<WandRight> _WandRightManager;
        
        private IEcsComponentManagerOf<WandLeft> _WandLeftManager;
        
        private IEcsComponentManagerOf<Wands> _WandsManager;
        
        private InputSystemTriggerEventHandler InputSystemTriggerEventHandlerInstance = new InputSystemTriggerEventHandler();
        
        public IEcsComponentManagerOf<Wand> WandManager {
            get {
                return _WandManager;
            }
            set {
                _WandManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandRight> WandRightManager {
            get {
                return _WandRightManager;
            }
            set {
                _WandRightManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandLeft> WandLeftManager {
            get {
                return _WandLeftManager;
            }
            set {
                _WandLeftManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Wands> WandsManager {
            get {
                return _WandsManager;
            }
            set {
                _WandsManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            WandManager = ComponentSystem.RegisterComponent<Wand>(4);
            WandRightManager = ComponentSystem.RegisterComponent<WandRight>(1);
            WandLeftManager = ComponentSystem.RegisterComponent<WandLeft>(3);
            WandsManager = ComponentSystem.RegisterGroup<WandsGroup,Wands>();
            this.OnEvent<uFrame.Kernel.KernelLoadedEvent>().Subscribe(_=>{ InputSystemKernelLoadedFilter(_); }).DisposeWith(this);
            this.OnEvent<ViveDB.TriggerEvent>().Subscribe(_=>{ InputSystemTriggerEventFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void InputSystemUpdateHandler(Wand group) {
        }
        
        protected void InputSystemUpdateFilter() {
            var WandItems = WandManager.Components;
            for (var WandIndex = 0
            ; WandIndex < WandItems.Count; WandIndex++
            ) {
                if (!WandItems[WandIndex].Enabled) {
                    continue;
                }
                this.InputSystemUpdateHandler(WandItems[WandIndex]);
            }
        }
        
        public virtual void SystemUpdate() {
            InputSystemUpdateFilter();
        }
        
        protected virtual void InputSystemKernelLoadedHandler(uFrame.Kernel.KernelLoadedEvent data, Wand group) {
        }
        
        protected void InputSystemKernelLoadedFilter(uFrame.Kernel.KernelLoadedEvent data) {
            var WandItems = WandManager.Components;
            for (var WandIndex = 0
            ; WandIndex < WandItems.Count; WandIndex++
            ) {
                if (!WandItems[WandIndex].Enabled) {
                    continue;
                }
                this.InputSystemKernelLoadedHandler(data, WandItems[WandIndex]);
            }
        }
        
        protected virtual void InputSystemTriggerEventHandler(ViveDB.TriggerEvent data) {
            var handler = InputSystemTriggerEventHandlerInstance;
            handler.System = this;
            handler.Event = data;
            StartCoroutine(handler.Execute());
        }
        
        protected void InputSystemTriggerEventFilter(ViveDB.TriggerEvent data) {
            this.InputSystemTriggerEventHandler(data);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("87a508dc-5402-4299-bafa-d68562dad086")]
    public partial class InputSystem : InputSystemBase {
        
        private static InputSystem _Instance;
        
        public InputSystem() {
            Instance = this;
        }
        
        public static InputSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
