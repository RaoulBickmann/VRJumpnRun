// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ViveDB {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    using ViveDB;
    
    
    public partial class InputSystemBase : uFrame.ECS.Systems.EcsSystem, uFrame.ECS.APIs.ISystemUpdate {
        
        private IEcsComponentManagerOf<Wands> _WandsManager;
        
        private IEcsComponentManagerOf<Player> _PlayerManager;
        
        private IEcsComponentManagerOf<WandRight> _WandRightManager;
        
        private IEcsComponentManagerOf<WandLeft> _WandLeftManager;
        
        public IEcsComponentManagerOf<Wands> WandsManager {
            get {
                return _WandsManager;
            }
            set {
                _WandsManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Player> PlayerManager {
            get {
                return _PlayerManager;
            }
            set {
                _PlayerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandRight> WandRightManager {
            get {
                return _WandRightManager;
            }
            set {
                _WandRightManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandLeft> WandLeftManager {
            get {
                return _WandLeftManager;
            }
            set {
                _WandLeftManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            WandsManager = ComponentSystem.RegisterComponent<Wands>(5);
            PlayerManager = ComponentSystem.RegisterComponent<Player>(6);
            WandRightManager = ComponentSystem.RegisterComponent<WandRight>(1);
            WandLeftManager = ComponentSystem.RegisterComponent<WandLeft>(3);
            this.OnEvent<ViveDB.MoveEvent>().Subscribe(_=>{ InputSystemMoveEventFilter(_); }).DisposeWith(this);
            this.OnEvent<ViveDB.TeleportEvent>().Subscribe(_=>{ InputSystemTeleportEventFilter(_); }).DisposeWith(this);
            this.OnEvent<ViveDB.ShootEvent>().Subscribe(_=>{ InputSystemShootEventFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.Kernel.KernelLoadedEvent>().Subscribe(_=>{ InputSystemKernelLoadedFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void InputSystemMoveEventHandler(ViveDB.MoveEvent data, Player group) {
        }
        
        protected void InputSystemMoveEventFilter(ViveDB.MoveEvent data) {
            var PlayerItems = PlayerManager.Components;
            for (var PlayerIndex = 0
            ; PlayerIndex < PlayerItems.Count; PlayerIndex++
            ) {
                if (!PlayerItems[PlayerIndex].Enabled) {
                    continue;
                }
                this.InputSystemMoveEventHandler(data, PlayerItems[PlayerIndex]);
            }
        }
        
        protected virtual void InputSystemTeleportEventHandler(ViveDB.TeleportEvent data, Wands group) {
        }
        
        protected void InputSystemTeleportEventFilter(ViveDB.TeleportEvent data) {
            var WandsItems = WandsManager.Components;
            for (var WandsIndex = 0
            ; WandsIndex < WandsItems.Count; WandsIndex++
            ) {
                if (!WandsItems[WandsIndex].Enabled) {
                    continue;
                }
                this.InputSystemTeleportEventHandler(data, WandsItems[WandsIndex]);
            }
        }
        
        protected virtual void InputSystemUpdateHandler(Wands group) {
        }
        
        protected void InputSystemUpdateFilter() {
            var WandsItems = WandsManager.Components;
            for (var WandsIndex = 0
            ; WandsIndex < WandsItems.Count; WandsIndex++
            ) {
                if (!WandsItems[WandsIndex].Enabled) {
                    continue;
                }
                this.InputSystemUpdateHandler(WandsItems[WandsIndex]);
            }
        }
        
        public virtual void SystemUpdate() {
            InputSystemUpdateFilter();
        }
        
        protected virtual void InputSystemShootEventHandler(ViveDB.ShootEvent data, Wands group) {
        }
        
        protected void InputSystemShootEventFilter(ViveDB.ShootEvent data) {
            var WandsItems = WandsManager.Components;
            for (var WandsIndex = 0
            ; WandsIndex < WandsItems.Count; WandsIndex++
            ) {
                if (!WandsItems[WandsIndex].Enabled) {
                    continue;
                }
                this.InputSystemShootEventHandler(data, WandsItems[WandsIndex]);
            }
        }
        
        protected virtual void InputSystemKernelLoadedHandler(uFrame.Kernel.KernelLoadedEvent data, Wands group) {
        }
        
        protected void InputSystemKernelLoadedFilter(uFrame.Kernel.KernelLoadedEvent data) {
            var WandsItems = WandsManager.Components;
            for (var WandsIndex = 0
            ; WandsIndex < WandsItems.Count; WandsIndex++
            ) {
                if (!WandsItems[WandsIndex].Enabled) {
                    continue;
                }
                this.InputSystemKernelLoadedHandler(data, WandsItems[WandsIndex]);
            }
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("87a508dc-5402-4299-bafa-d68562dad086")]
    public partial class InputSystem : InputSystemBase {
        
        private static InputSystem _Instance;
        
        public InputSystem() {
            Instance = this;
        }
        
        public static InputSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
