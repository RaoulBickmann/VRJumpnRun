// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ViveDB {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    using ViveDB;
    
    
    public partial class InputSystemBase : uFrame.ECS.Systems.EcsSystem, uFrame.ECS.APIs.ISystemUpdate {
        
        private IEcsComponentManagerOf<Player> _PlayerManager;
        
        private IEcsComponentManagerOf<Grabable> _GrabableManager;
        
        private IEcsComponentManagerOf<WandLeft> _WandLeftManager;
        
        private IEcsComponentManagerOf<WandRight> _WandRightManager;
        
        private IEcsComponentManagerOf<Turret> _TurretManager;
        
        private IEcsComponentManagerOf<Feet> _FeetManager;
        
        private IEcsComponentManagerOf<Checkpoint> _CheckpointManager;
        
        private IEcsComponentManagerOf<Menu> _MenuManager;
        
        private IEcsComponentManagerOf<WandManager> _WandManagerManager;
        
        private IEcsComponentManagerOf<Bullet> _BulletManager;
        
        private IEcsComponentManagerOf<Rig> _RigManager;
        
        public IEcsComponentManagerOf<Player> PlayerManager {
            get {
                return _PlayerManager;
            }
            set {
                _PlayerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Grabable> GrabableManager {
            get {
                return _GrabableManager;
            }
            set {
                _GrabableManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandLeft> WandLeftManager {
            get {
                return _WandLeftManager;
            }
            set {
                _WandLeftManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandRight> WandRightManager {
            get {
                return _WandRightManager;
            }
            set {
                _WandRightManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Turret> TurretManager {
            get {
                return _TurretManager;
            }
            set {
                _TurretManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Feet> FeetManager {
            get {
                return _FeetManager;
            }
            set {
                _FeetManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Checkpoint> CheckpointManager {
            get {
                return _CheckpointManager;
            }
            set {
                _CheckpointManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Menu> MenuManager {
            get {
                return _MenuManager;
            }
            set {
                _MenuManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandManager> WandManagerManager {
            get {
                return _WandManagerManager;
            }
            set {
                _WandManagerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Bullet> BulletManager {
            get {
                return _BulletManager;
            }
            set {
                _BulletManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Rig> RigManager {
            get {
                return _RigManager;
            }
            set {
                _RigManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            PlayerManager = ComponentSystem.RegisterComponent<Player>(6);
            GrabableManager = ComponentSystem.RegisterComponent<Grabable>(7);
            WandLeftManager = ComponentSystem.RegisterComponent<WandLeft>(3);
            WandRightManager = ComponentSystem.RegisterComponent<WandRight>(1);
            TurretManager = ComponentSystem.RegisterComponent<Turret>(10);
            FeetManager = ComponentSystem.RegisterComponent<Feet>(14);
            CheckpointManager = ComponentSystem.RegisterComponent<Checkpoint>(12);
            MenuManager = ComponentSystem.RegisterComponent<Menu>(13);
            WandManagerManager = ComponentSystem.RegisterComponent<WandManager>(5);
            BulletManager = ComponentSystem.RegisterComponent<Bullet>(11);
            RigManager = ComponentSystem.RegisterComponent<Rig>(9);
            this.OnEvent<uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher>().Subscribe(_=>{ InputSystemOnTriggerEnterFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.UnityUtilities.OnTriggerStayDispatcher>().Subscribe(_=>{ InputSystemOnTriggerStayFilter(_); }).DisposeWith(this);
            this.OnEvent<ViveDB.MenuEvent>().Subscribe(_=>{ InputSystemMenuEventFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.UnityUtilities.OnTriggerExitDispatcher>().Subscribe(_=>{ InputSystemOnTriggerExitFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher>().Subscribe(_=>{ InputSystemMenuOnTriggerEnterFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.Kernel.KernelLoadedEvent>().Subscribe(_=>{ InputSystemKernelLoadedFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void InputSystemOnTriggerEnterHandler(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data, Grabable collider, WandLeft source) {
        }
        
        protected void InputSystemOnTriggerEnterFilter(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data) {
            var ColliderGrabable = GrabableManager[data.ColliderId];
            if (ColliderGrabable == null) {
                return;
            }
            if (!ColliderGrabable.Enabled) {
                return;
            }
            var SourceWandLeft = WandLeftManager[data.EntityId];
            if (SourceWandLeft == null) {
                return;
            }
            if (!SourceWandLeft.Enabled) {
                return;
            }
            this.InputSystemOnTriggerEnterHandler(data, ColliderGrabable, SourceWandLeft);
        }
        
        protected virtual void InputSystemOnTriggerStayHandler(uFrame.ECS.UnityUtilities.OnTriggerStayDispatcher data, Grabable collider, WandLeft source) {
        }
        
        protected void InputSystemOnTriggerStayFilter(uFrame.ECS.UnityUtilities.OnTriggerStayDispatcher data) {
            var ColliderGrabable = GrabableManager[data.ColliderId];
            if (ColliderGrabable == null) {
                return;
            }
            if (!ColliderGrabable.Enabled) {
                return;
            }
            var SourceWandLeft = WandLeftManager[data.EntityId];
            if (SourceWandLeft == null) {
                return;
            }
            if (!SourceWandLeft.Enabled) {
                return;
            }
            this.InputSystemOnTriggerStayHandler(data, ColliderGrabable, SourceWandLeft);
        }
        
        protected virtual void InputSystemMenuEventHandler(ViveDB.MenuEvent data, WandRight group) {
        }
        
        protected void InputSystemMenuEventFilter(ViveDB.MenuEvent data) {
            var WandRightItems = WandRightManager.Components;
            for (var WandRightIndex = 0
            ; WandRightIndex < WandRightItems.Count; WandRightIndex++
            ) {
                if (!WandRightItems[WandRightIndex].Enabled) {
                    continue;
                }
                this.InputSystemMenuEventHandler(data, WandRightItems[WandRightIndex]);
            }
        }
        
        protected virtual void InputSystemOnTriggerExitHandler(uFrame.ECS.UnityUtilities.OnTriggerExitDispatcher data, Grabable collider, WandLeft source) {
        }
        
        protected void InputSystemOnTriggerExitFilter(uFrame.ECS.UnityUtilities.OnTriggerExitDispatcher data) {
            var ColliderGrabable = GrabableManager[data.ColliderId];
            if (ColliderGrabable == null) {
                return;
            }
            if (!ColliderGrabable.Enabled) {
                return;
            }
            var SourceWandLeft = WandLeftManager[data.EntityId];
            if (SourceWandLeft == null) {
                return;
            }
            if (!SourceWandLeft.Enabled) {
                return;
            }
            this.InputSystemOnTriggerExitHandler(data, ColliderGrabable, SourceWandLeft);
        }
        
        protected virtual void InputSystemUpdateLeftHandler(WandLeft group) {
        }
        
        protected void InputSystemUpdateLeftFilter() {
            var WandLeftItems = WandLeftManager.Components;
            for (var WandLeftIndex = 0
            ; WandLeftIndex < WandLeftItems.Count; WandLeftIndex++
            ) {
                if (!WandLeftItems[WandLeftIndex].Enabled) {
                    continue;
                }
                this.InputSystemUpdateLeftHandler(WandLeftItems[WandLeftIndex]);
            }
        }
        
        public virtual void SystemUpdate() {
            InputSystemUpdateLeftFilter();
            InputSystemUpdateRightFilter();
        }
        
        protected virtual void InputSystemUpdateRightHandler(WandRight group) {
        }
        
        protected void InputSystemUpdateRightFilter() {
            var WandRightItems = WandRightManager.Components;
            for (var WandRightIndex = 0
            ; WandRightIndex < WandRightItems.Count; WandRightIndex++
            ) {
                if (!WandRightItems[WandRightIndex].Enabled) {
                    continue;
                }
                this.InputSystemUpdateRightHandler(WandRightItems[WandRightIndex]);
            }
        }
        
        protected virtual void InputSystemMenuOnTriggerEnterHandler(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data, Menu collider, WandRight source) {
        }
        
        protected void InputSystemMenuOnTriggerEnterFilter(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data) {
            var ColliderMenu = MenuManager[data.ColliderId];
            if (ColliderMenu == null) {
                return;
            }
            if (!ColliderMenu.Enabled) {
                return;
            }
            var SourceWandRight = WandRightManager[data.EntityId];
            if (SourceWandRight == null) {
                return;
            }
            if (!SourceWandRight.Enabled) {
                return;
            }
            this.InputSystemMenuOnTriggerEnterHandler(data, ColliderMenu, SourceWandRight);
        }
        
        protected virtual void InputSystemKernelLoadedHandler(uFrame.Kernel.KernelLoadedEvent data, WandManager group) {
        }
        
        protected void InputSystemKernelLoadedFilter(uFrame.Kernel.KernelLoadedEvent data) {
            var WandManagerItems = WandManagerManager.Components;
            for (var WandManagerIndex = 0
            ; WandManagerIndex < WandManagerItems.Count; WandManagerIndex++
            ) {
                if (!WandManagerItems[WandManagerIndex].Enabled) {
                    continue;
                }
                this.InputSystemKernelLoadedHandler(data, WandManagerItems[WandManagerIndex]);
            }
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("87a508dc-5402-4299-bafa-d68562dad086")]
    public partial class InputSystem : InputSystemBase {
        
        private static InputSystem _Instance;
        
        public InputSystem() {
            Instance = this;
        }
        
        public static InputSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
